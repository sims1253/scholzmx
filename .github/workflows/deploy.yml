name: Deploy to GitHub Pages

on:
  workflow_run:
    workflows: ['Content Render (Quarto → Markdown)']
    types: [completed]
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

concurrency:
  group: 'deploy-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Install Bun for Astro toolchain
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            ~/.cache/bun
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock*') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install JavaScript dependencies
        run: bun install --frozen-lockfile

      # Download rendered content artifact from the triggering workflow run
      - name: Get content render run ID
        id: latest-render
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Use the run that triggered this workflow
            triggering_run_id="${{ github.event.workflow_run.id }}"
            echo "run-id=$triggering_run_id" >> $GITHUB_OUTPUT
            echo "Using triggering workflow run: $triggering_run_id"
          else
            # For manual dispatch, get the latest successful render run
            latest_run=$(gh run list \
              --workflow="Content Render (Quarto → Markdown)" \
              --status=success \
              --limit=1 \
              --json=databaseId \
              --jq='.[0].databaseId')
            echo "run-id=$latest_run" >> $GITHUB_OUTPUT
            echo "Using latest successful run: $latest_run"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download rendered content
        uses: actions/download-artifact@v4
        with:
          name: rendered-content
          path: rendered
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.latest-render.outputs.run-id }}
        continue-on-error: true

      # Debug - Show what files were downloaded and where
      - name: Debug - Show downloaded files
        run: |
          echo "=== Root directory contents ==="
          ls -la
          echo "=== Repo blog content (sample) ==="
          find src/content/blog -type f -name "*.md" | head -20 || true
          echo "=== Downloaded artifact content (rendered) ==="
          find rendered -path "rendered/src/content/blog/*/*/index.md" -type f || true
          echo "=== Directory tree of rendered blog content ==="
          tree rendered/src/content/blog || ls -la rendered/src/content/blog/*/ || true
          echo "=== Assets directory (repo) ==="
          ls -la src/assets/images/blog/ || echo "No assets directory"

      - name: Check if Markdown content is present in artifact
        id: has-md
        run: |
          if find rendered/src/content/blog -path '*/index.md' -type f | grep -q .; then
            echo "has-md=true" >> $GITHUB_OUTPUT
          else
            echo "has-md=false" >> $GITHUB_OUTPUT
          fi

      - name: Fallback - Get latest successful render run
        id: fallback-run
        if: steps.has-md.outputs.has-md != 'true'
        run: |
          latest_run=$(gh run list \
            --workflow="Content Render (Quarto → Markdown)" \
            --status=success \
            --limit=1 \
            --json=databaseId \
            --jq='.[0].databaseId // empty' || echo "")
          echo "run-id=$latest_run" >> $GITHUB_OUTPUT
          if [ -z "$latest_run" ]; then
            echo "No previous successful render run available for fallback" >&2
          else
            echo "Falling back to run: $latest_run"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback - Download rendered content
        if: steps.has-md.outputs.has-md != 'true' && steps.fallback-run.outputs.run-id != ''
        uses: actions/download-artifact@v4
        with:
          name: rendered-content
          path: rendered
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.fallback-run.outputs.run-id }}

      # Merge the rendered blog outputs into the repo without clobbering other content
      - name: Merge rendered blog content
        run: |
          set -e
          if [ -d rendered/src/content/blog ]; then
            echo "Merging rendered blog markdown into repo..."
            rsync -a rendered/src/content/blog/ src/content/blog/

            echo "Merging rendered blog assets per post..."
            while IFS= read -r -d '' f; do
              year=$(echo "$f" | sed -E 's|.*/blog/([0-9]{4})/.*|\1|')
              slug=$(basename "$(dirname "$f")")
              if [ -d "rendered/src/assets/images/blog/$year/$slug" ]; then
                mkdir -p "src/assets/images/blog/$year/$slug"
                rsync -a "rendered/src/assets/images/blog/$year/$slug/" "src/assets/images/blog/$year/$slug/"
              fi
            done < <(find rendered/src/content/blog -path '*/index.md' -type f -print0)
          else
            echo "No rendered content directory found; continuing with repo content only."
          fi

      - name: Verify content present before build
        run: |
          count_repo=$(find src/content/blog -name '*.md' -type f | wc -l || echo 0)
          count_rendered=$(find rendered/src/content/blog -path '*/index.md' -type f | wc -l || echo 0)
          if [ "$count_repo" -eq 0 ] && [ "$count_rendered" -eq 0 ]; then
            echo "Error: No Markdown content found (neither repo nor rendered). Aborting deploy to avoid publishing an empty site." >&2
            exit 1
          fi

      # Build Astro site
      - name: Build site
        run: bun run build

      # Upload the built site as artifact for Pages
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
