name: Content Render (Quarto → Markdown)

on:
  push:
    branches: [main, master]
    paths:
      - 'src/content/**/*.qmd'
      - 'src/content/**/*.md'
      - 'build-blog.sh'
      - '_quarto.yml'
      - '.github/workflows/content-render.yml'
      - 'astro.config.mjs'
      - 'package.json'
      - 'src/**/*.astro'
      - 'src/**/*.ts'
      - 'src/**/*.js'
      - 'src/styles/**/*.css'
  workflow_dispatch:

permissions:
  contents: read
  actions: read

concurrency:
  group: 'render-${{ github.ref }}'
  cancel-in-progress: true

jobs:
  check-cache:
    name: Check if rendering is needed
    runs-on: ubuntu-latest
    outputs:
      needs-render: ${{ steps.cache-check.outputs.needs-render }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Check for force rebuild flag
      - name: Check for force rebuild
        id: force-check
        run: |
          # Check if commit message contains [force-rebuild]
          if git log -1 --pretty=%B | grep -q "\[force-rebuild\]"; then
            echo "Force rebuild requested in commit message"
            echo "force-rebuild=true" >> $GITHUB_OUTPUT
          else
            echo "force-rebuild=false" >> $GITHUB_OUTPUT
          fi

      # Quick cache check without downloading artifacts first
      - name: Check if rendering is needed
        id: cache-check
        run: |
          needs_render=false
          force_rebuild="${{ steps.force-check.outputs.force-rebuild }}"

          # Force rebuild if requested
          if [ "$force_rebuild" = "true" ]; then
            echo "Force rebuild requested - will render all content"
            needs_render=true
            echo "needs-render=$needs_render" >> $GITHUB_OUTPUT
            exit 0
          fi

          # First check if we have any QMD files to process
          qmd_files=$(find src/content/blog -name "index.qmd" -path "*/[0-9][0-9][0-9][0-9]/*/*" -type f | wc -l)
          if [ "$qmd_files" -eq 0 ]; then
            echo "No QMD files found to process"
            echo "needs-render=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check each QMD file for changes (without relying on downloaded cache)
          while IFS= read -r -d '' qmd_file; do
            echo "Checking $qmd_file..."

            # For initial assessment, if this is a push event, assume content may have changed
            # We'll do proper cache checking in the render job with fresh downloads
            if [ "${{ github.event_name }}" = "push" ]; then
              # If corresponding Markdown does not exist in the repo, we must render
              md_file="${qmd_file%.qmd}.md"
              if [ ! -f "$md_file" ]; then
                echo "  → No MD file present in repo for $qmd_file"
                needs_render=true
                break
              fi

              # Check if this specific file was modified in the push
              changed_files=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} 2>/dev/null || git diff --name-only HEAD~1..HEAD)
              if echo "$changed_files" | grep -q "$(basename $(dirname $qmd_file))\|$(basename $qmd_file)\|build-blog.sh\|_quarto.yml"; then
                echo "  → File or related content was modified in this push"
                needs_render=true
                break
              fi
            else
              # For manual runs or schedule, check if any content exists
              md_file="${qmd_file%.qmd}.md"
              if [ ! -f "$md_file" ]; then
                echo "  → No MD file found"
                needs_render=true
                break
              fi
            fi
          done < <(find src/content/blog -name "index.qmd" -path "*/[0-9][0-9][0-9][0-9]/*/*" -type f -print0)

          echo "needs-render=$needs_render" >> $GITHUB_OUTPUT
          if [ "$needs_render" = "true" ]; then
            echo "Rendering needed - content changes detected"
          else
            echo "No rendering needed - no relevant changes detected"
          fi

  render:
    name: Render Quarto content
    runs-on: ubuntu-latest
    needs: check-cache
    if: needs.check-cache.outputs.needs-render == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Setup R
        id: setup-r
        uses: r-lib/actions/setup-r@v2

      - name: Setup R dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: always
          packages: 'any::sessioninfo'
          extra-packages: |
            any::knitr
            any::rmarkdown
            any::tidyverse
            any::brms
            any::furrr
            any::patchwork
            any::extraDistr
            any::loo
            any::ggdag
            any::GGally
            any::dagitty
            github::sims1253/bayesim

      - name: Cache render hashes
        uses: actions/cache@v4
        with:
          path: .blog-cache
          key: render-cache-${{ runner.os }}-r${{ steps.setup-r.outputs.installed-r-version }}-${{ hashFiles('src/content/**/*.qmd', 'build-blog.sh', '_quarto.yml') }}
          restore-keys: |
            render-cache-${{ runner.os }}-r${{ steps.setup-r.outputs.installed-r-version }}-
            render-cache-${{ runner.os }}-

      # Download previous rendered content to enable caching (only if not force rebuilding)
      - name: Get latest content render run (excluding current)
        id: latest-render
        if: ${{ !contains(github.event.head_commit.message, '[force-rebuild]') }}
        run: |
          latest_run=$(gh run list \
            --workflow="Content Render (Quarto → Markdown)" \
            --status=success \
            --limit=5 \
            --json=databaseId \
            --jq="map(select(.databaseId != ${{ github.run_id }})) | .[0].databaseId // empty" || echo "")
          echo "run-id=$latest_run" >> $GITHUB_OUTPUT
          echo "Found previous run: $latest_run"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Download previous rendered content
        uses: actions/download-artifact@v4
        if: ${{ !contains(github.event.head_commit.message, '[force-rebuild]') && steps.latest-render.outputs.run-id != '' }}
        with:
          name: rendered-content
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.latest-render.outputs.run-id }}
        continue-on-error: true

      # Debug - Show what files were downloaded for caching
      - name: Debug - Show downloaded files for caching
        run: |
          echo "=== Root directory contents ==="
          ls -la
          echo "=== src/content/blog structure ==="
          find src/content/blog -type f -name "*.md" | head -20 || echo "No MD files found"
          echo "=== Cache directory ==="
          ls -la .blog-cache/ || echo "No cache directory"
          echo "=== Assets directory ==="
          ls -la src/assets/images/blog/ || echo "No assets directory"

      - name: Render Quarto posts
        run: bash build-blog.sh

      - name: Debug - List generated files
        run: |
          echo "=== Generated markdown files ==="
          find src/content/blog -name "*.md" -type f | head -20
          echo "=== Generated index.md files ==="
          find src/content/blog -name "index.md" -type f | head -20
          echo "=== Directory structure ==="
          ls -la src/content/blog/2022/*/
          echo "=== Asset directories ==="
          ls -la src/assets/images/blog/ || echo "No assets directory"

      - name: Upload rendered content artifact
        uses: actions/upload-artifact@v4
        with:
          name: rendered-content
          if-no-files-found: error
          compression-level: 6
          # Only upload generated blog outputs, not the entire src tree
          path: |
            src/content/blog/*/*/index.md
            src/assets/images/blog/
            .blog-cache/

  reuse-artifact:
    name: Reuse last rendered content
    runs-on: ubuntu-latest
    needs: check-cache
    if: needs.check-cache.outputs.needs-render != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find last successful render run
        id: latest-render
        run: |
          latest_run=$(gh run list \
            --workflow="Content Render (Quarto → Markdown)" \
            --status=success \
            --limit=5 \
            --json=databaseId \
            --jq='.[0].databaseId // empty' || echo "")
          echo "run-id=$latest_run" >> $GITHUB_OUTPUT
          if [ -z "$latest_run" ]; then
            echo "No previous successful render run found" >&2
          else
            echo "Using previous run: $latest_run"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download rendered content from previous run
        if: ${{ steps.latest-render.outputs.run-id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: rendered-content
          path: .
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.latest-render.outputs.run-id }}

      - name: Verify reused content exists
        run: |
          echo "=== Root directory contents ==="
          ls -la || true
          echo "=== Rendered index.md files (sample) ==="
          find src/content/blog -path '*/index.md' -type f | head -20 || true
          count=$(find src/content/blog -path '*/index.md' -type f | wc -l || echo 0)
          if [ "$count" -eq 0 ]; then
            echo "No rendered Markdown found to reuse; failing so deploy won’t publish incomplete site." >&2
            exit 1
          fi

      - name: Re-upload rendered content artifact
        uses: actions/upload-artifact@v4
        with:
          name: rendered-content
          if-no-files-found: error
          compression-level: 6
          # Only upload generated blog outputs, not the entire src tree
          path: |
            src/content/blog/*/*/index.md
            src/assets/images/blog/
            .blog-cache/
