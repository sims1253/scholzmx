---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import FaintLineDivider from '../../components/FaintLineDivider.astro';
import ImageFrame from '../../components/ImageFrame.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Helper function to get related posts based on tags
const getRelatedPosts = async (currentPost: any) => {
  const allPosts = await getCollection('blog');
  const currentTags = currentPost.data.tags || [];

  if (currentTags.length === 0) return [];

  return allPosts
    .filter((post) => post.slug !== currentPost.slug && !post.data.draft)
    .map((post) => {
      const commonTags = (post.data.tags || []).filter((tag) => currentTags.includes(tag));
      return { post, score: commonTags.length };
    })
    .filter((item) => item.score > 0)
    .sort((a, b) => b.score - a.score)
    .slice(0, 3)
    .map((item) => item.post);
};

// Helper function to get previous and next posts
const getAdjacentPosts = async (currentPost: any) => {
  const allPosts = await getCollection('blog');
  const publishedPosts = allPosts
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.getTime() - a.data.date.getTime());

  const currentIndex = publishedPosts.findIndex((post) => post.slug === currentPost.slug);

  return {
    prev: currentIndex > 0 ? publishedPosts[currentIndex - 1] : null,
    next: currentIndex < publishedPosts.length - 1 ? publishedPosts[currentIndex + 1] : null,
  };
};

const { post } = Astro.props;
const { Content } = await post.render();

// Get related and adjacent posts
const relatedPosts = await getRelatedPosts(post);
const { prev, next } = await getAdjacentPosts(post);

const formatDate = (date: Date) => {
  return date.toISOString().split('T')[0];
};
---

<BaseLayout
  title={`${post.data.title}`}
  description={post.data.description}
  footerVariant="writing"
  longform={true}
  personal={false}
>
  <div class="blog-post">
    <article class="post-content" itemscope itemtype="https://schema.org/Article">
      {
        post.data.heroImage && (
          <ImageFrame
            src={post.data.heroImage}
            alt={post.data.title}
            style="hero"
            aspectRatio="8/3"
            scale={post.data.heroImageScale}
            positionX={post.data.heroImagePositionX ? post.data.heroImagePositionX * 100 : 0}
            positionY={post.data.heroImagePositionY ? post.data.heroImagePositionY * 100 : 0}
            loading="eager"
            width={800}
            height={400}
          />
        )
      }

      <header class="post-header">
        <h1 class="post-title" itemprop="headline">
          {post.data.title}
        </h1>

        <div class="post-meta">
          <div class="post-dates">
            <div class="date-item">
              <span class="date-label">Written:</span>
              <time
                class="post-date"
                datetime={post.data.date.toISOString()}
                itemprop="datePublished"
              >
                {formatDate(post.data.date)}
              </time>
            </div>
            {
              post.data.lastUpdated && (
                <div class="date-item">
                  <span class="date-label">Updated:</span>
                  <time
                    class="post-date"
                    datetime={post.data.lastUpdated.toISOString()}
                    itemprop="dateModified"
                  >
                    {formatDate(post.data.lastUpdated)}
                  </time>
                </div>
              )
            }
          </div>
          {
            post.data.tags && (
              <ul class="post-tags" aria-label="Tags">
                {post.data.tags.map((tag) => (
                  <li class="tag" itemprop="keywords">
                    #{tag}
                  </li>
                ))}
              </ul>
            )
          }
        </div>
      </header>

      <FaintLineDivider width="wide" />

      <section class="post-body longform" itemprop="articleBody">
        <Content />
      </section>

      <aside class="footnotes-area" aria-label="Footnotes"></aside>

      <FaintLineDivider width="medium" />

      <footer class="post-footer">
        <nav class="post-navigation" aria-label="Post navigation">
          <div class="nav-links">
            {
              prev && (
                <a href={`/blog/${prev.slug}`} class="nav-link prev-link" rel="prev">
                  <span class="nav-direction">← Previous</span>
                  <span class="nav-title">{prev.data.title}</span>
                </a>
              )
            }
            {
              next && (
                <a href={`/blog/${next.slug}`} class="nav-link next-link" rel="next">
                  <span class="nav-direction">Next →</span>
                  <span class="nav-title">{next.data.title}</span>
                </a>
              )
            }
          </div>
          <a href="/blog" class="back-link">← Back to Writing</a>
        </nav>

        {
          relatedPosts.length > 0 && (
            <section class="related-posts" aria-label="Related posts">
              <h2 class="related-title">Related Posts</h2>
              <div class="related-cards">
                {relatedPosts.map((relatedPost) => (
                  <article class="related-card">
                    <h3 class="card-title">
                      <a href={`/blog/${relatedPost.slug}`}>{relatedPost.data.title}</a>
                    </h3>
                    <p class="card-excerpt">{relatedPost.data.description}</p>
                    <time class="card-date" datetime={relatedPost.data.date.toISOString()}>
                      {formatDate(relatedPost.data.date)}
                    </time>
                    {relatedPost.data.tags && (
                      <div class="card-tags">
                        {relatedPost.data.tags.slice(0, 2).map((tag) => (
                          <span class="card-tag">#{tag}</span>
                        ))}
                      </div>
                    )}
                  </article>
                ))}
              </div>
            </section>
          )
        }
      </footer>
    </article>
  </div>
</BaseLayout>

<script>
  // Simple margin notes conversion
  document.addEventListener('DOMContentLoaded', function () {
    const blockquotes = document.querySelectorAll('.post-body blockquote');

    blockquotes.forEach((blockquote) => {
      const firstP = blockquote.querySelector('p:first-child');
      if (firstP && firstP.textContent && firstP.textContent.trim().toLowerCase().startsWith('margin:')) {
        // Remove the "margin:" prefix
        const text = firstP.textContent.replace(/^margin:\s*/i, '').trim();
        firstP.textContent = text;

        // Convert blockquote to margin note
        blockquote.classList.add('margin-note');
        blockquote.setAttribute('aria-label', 'Margin note');
      }
    });
  });
</script>

<style>
  .blog-post {
    max-width: 100%;
  }

  .post-content {
    padding: 0 0 var(--space-xs) 0;
    position: relative;
  }


  .post-header {
    position: relative;
  }

  .post-title {
    display: flex;
    align-items: baseline;
    gap: 0.15em;
    flex-wrap: wrap;
    text-align: center;
    justify-content: center;
    margin-bottom: var(--space-xs);
  }
  .post-title .title-initial {
    display: inline-flex;
    line-height: 1;
  }
  .post-title .title-rest {
    display: inline;
  }

  .post-meta {
    position: absolute;
    right: -220px;
    top: 0;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: var(--space-sm);
    width: 200px;
  }

  .post-dates {
    display: flex;
    flex-direction: column;
    gap: var(--space-xxs);
  }

  .date-item {
    display: flex;
    align-items: baseline;
    gap: 0.35em;
    text-align: right;
  }

  .date-label {
    font-size: var(--text-xs);
    color: var(--color-text-muted);
    font-weight: 500;
    letter-spacing: 0.05em;
    white-space: nowrap;
  }

  .post-date {
    font-size: var(--text-xs);
    color: var(--color-ink-light);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    white-space: nowrap;
  }

  .post-tags {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
    justify-content: flex-end;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .tag {
    position: relative;
    font-size: var(--text-2xs, 0.7rem);
    color: var(--color-accent-secondary);
    background: var(--wash-sage);
    padding: 0.15em 0.5em;
    border-radius: 999px;
    font-weight: 500;
    letter-spacing: 0.02em;
    border: 1px solid var(--color-lichen);
    text-decoration: none;
  }

  .tag:hover {
    color: var(--color-link-hover);
    background: color-mix(in srgb, var(--wash-sage) 60%, transparent);
    border-color: var(--color-sage);
  }

  .post-title {
    font-size: clamp(var(--text-2xl), 5vw, var(--text-3xl));
    line-height: 1.2;
    color: var(--color-ink-dark);
    font-family: var(--font-heading);
    font-weight: var(--font-weight-semibold);
  }

  .post-body :global(figure) {
    margin: var(--space-xl) auto;
  }
  .post-body :global(figcaption) {
    font-size: var(--text-xs);
    color: var(--color-ink-light);
    text-align: center;
    margin-top: var(--space-xs);
    font-style: italic;
  }

  .post-body :global(section.footnotes),
  .footnotes-area :global(section.footnotes) {
    border-top: 1px solid rgba(139, 90, 60, 0.15);
    margin-top: var(--space-xl);
    padding-top: var(--space-md);
  }
  .post-body :global(section.footnotes ol) {
    padding-left: var(--space-lg);
  }
  .post-body :global(section.footnotes li) {
    margin-bottom: var(--space-sm);
  }
  .post-body :global(a.footnote-backref) {
    text-decoration: none;
    color: var(--color-walnut);
    border-bottom: 1px dotted var(--color-walnut);
  }

  .post-footer {
    margin-top: var(--space-xxl);
    padding-top: var(--space-lg);
    border-top: 1px solid rgba(139, 90, 60, 0.1);
  }

  .post-navigation {
    text-align: center;
  }

  .back-link {
    font-size: var(--text-sm);
    color: var(--color-walnut);
    text-decoration: none;
    font-weight: 500;
    padding: var(--space-xs) var(--space-sm);
    border: 1px solid var(--color-walnut);
    border-radius: var(--border-radius);
    transition: all var(--transition-fast);
  }

  .back-link:hover {
    background-color: var(--color-walnut);
    color: var(--color-parchment-light);
  }

  /* Navigation Links */
  .nav-links {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-lg);
    margin-bottom: var(--space-lg);
  }

  .nav-link {
    display: flex;
    flex-direction: column;
    padding: var(--space-md);
    border: 1px solid var(--color-lichen);
    border-radius: var(--border-radius);
    text-decoration: none;
    transition: all var(--transition-fast);
    background: var(--color-surface);
  }

  .prev-link {
    text-align: left;
  }

  .next-link {
    text-align: right;
    grid-column: 2;
  }

  .nav-direction {
    font-size: var(--text-xs);
    color: var(--color-text-muted);
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: var(--space-xxs);
  }

  .nav-title {
    font-size: var(--text-sm);
    color: var(--color-walnut);
    font-weight: 600;
    line-height: 1.3;
  }

  .nav-link:hover {
    border-color: var(--color-sage);
    background: rgba(168, 181, 160, 0.05);
  }

  /* Related Posts */
  .related-posts {
    margin-top: var(--space-xl);
    padding-top: var(--space-lg);
    border-top: 1px solid rgba(139, 90, 60, 0.1);
  }

  .related-title {
    font-family: var(--font-heading);
    font-size: var(--text-lg);
    color: var(--color-walnut);
    margin-bottom: var(--space-md);
    text-align: center;
  }

  .related-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: var(--space-md);
  }

  .related-card {
    padding: var(--space-md);
    border: 1px solid var(--color-lichen);
    border-radius: var(--border-radius);
    background-color: var(--color-surface);
    transition: all var(--transition-fast);
  }

  .related-card:hover {
    border-color: var(--color-sage);
    box-shadow: 0 2px 8px rgba(168, 181, 160, 0.1);
  }

  .card-title {
    margin: 0 0 var(--space-xs);
    font-size: var(--text-md);
    line-height: 1.3;
  }

  .card-title a {
    color: var(--color-walnut);
    text-decoration: none;
    font-weight: 600;
  }

  .card-title a:hover {
    color: var(--color-moss);
  }

  .card-excerpt {
    font-size: var(--text-sm);
    color: var(--color-text-secondary);
    line-height: 1.4;
    margin: 0 0 var(--space-xs);
  }

  .card-date {
    font-size: var(--text-xs);
    color: var(--color-text-muted);
    font-weight: 500;
  }

  .card-tags {
    display: flex;
    gap: var(--space-xxs);
    margin-top: var(--space-xs);
  }

  .card-tag {
    font-size: var(--text-xs);
    color: var(--color-moss);
    background: rgba(90, 107, 71, 0.1);
    padding: 0.15em 0.4em;
    border-radius: calc(var(--border-radius) / 2);
  }

  /* Margin Notes Styling - Applied via JavaScript */
  .post-body.longform :global(.margin-note) {
    position: absolute !important;
    left: 82%;
    width: 200px;
    font-size: var(--text-sm);
    color: var(--color-text-muted);
    line-height: 1.4;
    padding: var(--space-xs);
    background: rgba(248, 248, 242, 0.9) !important;
    border-left: 2px solid var(--color-sage) !important;
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
    box-shadow: 0 2px 8px rgba(168, 181, 160, 0.1);
    font-style: normal !important;
    margin: 0 !important;
  }

  /* Remove the decorative quote from margin notes */
  .post-body.longform :global(.margin-note::before) {
    display: none !important;
  }

  @media (max-width: 1400px) {
    .post-body.longform :global(.margin-note) {
      display: none !important;
    }
  }

  @media (max-width: 1400px) {
    .post-meta {
      position: static;
      width: auto;
      align-items: flex-start;
      flex-direction: row;
      justify-content: flex-start;
      margin-top: var(--space-sm);
      gap: var(--space-lg);
    }

    .post-tags {
      justify-content: flex-start;
    }
  }

  @media (max-width: 768px) {
    .post-content {
      padding: var(--space-lg) var(--space-md);
    }

    .post-meta {
      flex-direction: column;
      gap: var(--space-sm);
    }

    .post-title {
      text-align: center;
    }

    .nav-links {
      grid-template-columns: 1fr;
      gap: var(--space-md);
    }

    .next-link {
      grid-column: 1;
    }

    .related-cards {
      grid-template-columns: 1fr;
    }
  }
</style>
