---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import DropCap from '../../components/DropCap.astro';
import ImageFrame from '../../components/ImageFrame.astro';

/* Note: Content markdown cannot render Astro components by default.
   To allow components inside markdown, pass them via the 'components' prop on <Content />. */
// import { Image } from 'astro:assets';

export async function getStaticPaths() {
  const recipes = await getCollection('recipes');
  return recipes.map((recipe) => ({
    params: { slug: recipe.slug },
    props: { recipe },
  }));
}

const { recipe } = Astro.props;
const { Content } = await recipe.render();
---

<BaseLayout
  title={`${recipe.data.title} - Scholz MX`}
  description={recipe.data.description}
  footerVariant="kitchen"
  longform={true}
  personal={true}
>
  <div class="recipe-post">
    <article class="recipe-content">
      <header class="recipe-header">
        <div class="recipe-meta">
          <div class="recipe-info">
            <span class="recipe-servings" title="Servings">üë• {recipe.data.servings}</span>
            <span class="recipe-time" title="Total time">‚è±Ô∏è {recipe.data.time}</span>
            <span class="recipe-season" title="Season">üåø {recipe.data.season}</span>
          </div>
          {
            recipe.data.tags && (
              <div class="recipe-tags">
                {recipe.data.tags.map((tag) => (
                  <span class="tag">#{tag}</span>
                ))}
              </div>
            )
          }
        </div>

        <h1 class="recipe-title">
          {recipe.data.title}
        </h1>

        <p class="recipe-description">{recipe.data.description}</p>

        {
          recipe.data.heroImage && (
            <ImageFrame
              src={recipe.data.heroImage}
              alt={recipe.data.title}
              style="hero"
              aspectRatio="8/3"
              scale={recipe.data.heroImageScale}
              positionX={recipe.data.heroImagePositionX ? recipe.data.heroImagePositionX * 100 : 0}
              positionY={recipe.data.heroImagePositionY ? recipe.data.heroImagePositionY * 100 : 0}
              loading="eager"
              width={800}
              height={400}
              className="recipe-hero"
            />
          )
        }
      </header>

      <div class="recipe-body longform personal-content">
        <!-- Allow markdown to use MarginNote and DropCap components -->
        <Content components={{ DropCap }} />
        <!-- Fallback for plain HTML margin note markup in Markdown (no components mapping needed) -->
        <!-- If Markdown contains <span class="margin-note-container">..., it will render as-is -->
      </div>

      <footer class="recipe-footer">
        <nav class="recipe-navigation">
          <a href="/recipes" class="back-link">‚Üê Back to Kitchen</a>
        </nav>
      </footer>
    </article>
  </div>
</BaseLayout>

<style>
  .recipe-post {
    max-width: 100%;
  }

  .recipe-content {
    max-width: var(--content-width-personal); /* Use personal content width (65ch) */
    margin: 0 auto;
    padding: var(--space-xl) var(--space-lg);
  }

  .recipe-header {
    margin-bottom: var(--space-xl);
    text-align: center;
  }

  .recipe-meta {
    display: flex;
    flex-direction: column;
    gap: var(--space-md);
    margin-bottom: var(--space-lg);
  }

  .recipe-info {
    display: flex;
    justify-content: center;
    gap: var(--space-lg);
    flex-wrap: wrap;
  }

  .recipe-servings,
  .recipe-time,
  .recipe-season {
    font-family: var(--font-body-personal); /* Alegreya */
    font-size: var(--text-sm);
    color: var(--color-ink-medium);
    font-weight: 500;
  }

  .recipe-tags {
    display: flex;
    gap: var(--space-xs);
    flex-wrap: wrap;
    justify-content: center;
  }

  .tag {
    font-family: var(--font-body-personal); /* Alegreya */
    font-size: var(--text-xs);
    color: var(--color-moss);
    background-color: rgba(90, 107, 71, 0.1);
    padding: 0.2em 0.5em;
    border-radius: calc(var(--border-radius) / 2);
    font-weight: 500;
  }

  .recipe-title {
    font-family: var(--font-body-personal); /* Alegreya */
    font-size: clamp(var(--text-xl), 4vw, var(--text-2xl));
    line-height: 1.2;
    margin-bottom: var(--space-md);
    color: var(--color-ink-dark);
    text-align: left;
  }

  .recipe-description {
    font-family: var(--font-body-personal); /* Alegreya */
    font-size: var(--text-lg);
    font-style: italic;
    color: var(--color-ink-medium);
    line-height: 1.6;
    margin-bottom: var(--space-lg);
  }

  /* Typography now handled by global .longform class */

  .recipe-body :global(strong) {
    color: var(--color-walnut);
    font-weight: 600;
  }

  .recipe-body :global(em) {
    color: var(--color-ink-medium);
  }

  .recipe-body :global(img) {
    width: 100%;
    height: auto;
    border-radius: var(--border-radius);
    box-shadow: 0 4px 12px rgba(139, 90, 60, 0.15);
    margin: var(--space-lg) 0;
  }

  .recipe-footer {
    margin-top: var(--space-xxl);
    padding-top: var(--space-lg);
    border-top: 1px solid rgba(139, 90, 60, 0.1);
  }

  .recipe-navigation {
    text-align: center;
  }

  .back-link {
    font-family: var(--font-body-personal); /* Alegreya */
    font-size: var(--text-sm);
    color: var(--color-walnut);
    text-decoration: none;
    font-weight: 500;
    padding: var(--space-xs) var(--space-sm);
    border: 1px solid var(--color-walnut);
    border-radius: var(--border-radius);
    transition: all var(--transition-fast);
  }

  .back-link:hover {
    background-color: var(--color-walnut);
    color: var(--color-parchment-light);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .recipe-content {
      padding: var(--space-lg) var(--space-md);
    }

    .recipe-info {
      flex-direction: column;
      gap: var(--space-xs);
      align-items: center;
    }

    .recipe-title {
      text-align: center;
    }
  }
</style>
