---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import BaseLayout from '../layouts/BaseLayout.astro';

const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const posts = allPosts.sort(
  (a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);
const years = Array.from(new Set(posts.map((p) => new Date(p.data.date).getFullYear()))).sort(
  (a, b) => b - a
);
const tags = Array.from(new Set(posts.flatMap((p) => p.data.tags ?? []))).sort();

const formatDate = (date: Date) => date.toISOString().slice(0, 10);
---

<BaseLayout
  title="Writing"
  description="My long-form writing."
  footerVariant="writing"
  longform={true}
  personal={false}
>
  <div class="blog-page">
    <header class="blog-header">
      <h1 class="page-title" id="blog-title">Writing</h1>
      <!-- <p class="page-description">
        My long-form writing. 
        <span>
          <p>Quality over quantity. Write when there is something worth saying.</p>
        </span>
      </p> -->
    </header>

    <div class="blog-container">
      <aside class="blog-sidebar">
        <section class="sidebar-section">
          <h3>Filter by year</h3>
          <ul class="filter-list">
            <li><button class="filter-btn active" data-filter-year="">All</button></li>
            {
              years.map((y) => (
                <li>
                  <button class="filter-btn" data-filter-year={y}>
                    {y}
                  </button>
                </li>
              ))
            }
          </ul>
        </section>

        <section class="sidebar-section">
          <h3>Filter by tag</h3>
          <ul class="filter-list">
            <li><button class="filter-btn active" data-filter-tag="">All</button></li>
            {
              tags.map((t) => (
                <li>
                  <button class="filter-btn" data-filter-tag={t}>
                    #{t}
                  </button>
                </li>
              ))
            }
          </ul>
        </section>
      </aside>

      <main class="blog-content">
        <section class="cards-grid" aria-label="Posts">
          {
            years.map((year) => (
              <div class="year-group" data-year-group={year}>
                <h2 class="year-heading" id={`year-${year}`}>
                  <>
                    <span class="vine" />
                    <span class="year-text">{year}</span>
                    <span class="vine" />
                  </>
                </h2>
                <div class="cards">
                  {posts
                    .filter((p) => new Date(p.data.date).getFullYear() === year)
                    .map((post) => (
                      <article
                        class="post-card"
                        data-year={year}
                        data-tags={post.data.tags?.join(',') || ''}
                        data-href={`/blog/${post.slug}`}
                      >
                        <a
                          class="card-link"
                          href={`/blog/${post.slug}`}
                          aria-label={post.data.title}
                        />
                        {post.data.heroImage && (
                          <figure class="thumb">
                            <div
                              class="thumb-wrapper"
                              style={`transform: scale(${post.data.heroImageScale || 1}) translate(${(post.data.heroImagePositionX || 0) * 100}%, ${(post.data.heroImagePositionY || 0) * 100}%);`}
                            >
                              <div class="thumb-inner">
                                {typeof post.data.heroImage === 'string' ? (
                                  <img src={post.data.heroImage} alt="" loading="lazy" />
                                ) : (
                                  <Image
                                    src={post.data.heroImage}
                                    alt=""
                                    width={300}
                                    height={200}
                                    widths={[150, 300]}
                                    sizes="(max-width: 768px) 150px, 300px"
                                    format="webp"
                                    loading="lazy"
                                  />
                                )}
                              </div>
                            </div>
                          </figure>
                        )}
                        <div class="card-body">
                          <h3 class="card-title">
                            <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                          </h3>
                          <p class="card-excerpt">{post.data.description}</p>
                          <div class="card-meta">
                            <div class="card-dates">
                              <div class="card-date-item">
                                <span class="card-date-label">Written:</span>
                                <time datetime={post.data.date.toISOString()} class="meta-date">
                                  {formatDate(post.data.date)}
                                </time>
                              </div>
                              {post.data.lastUpdated && (
                                <div class="card-date-item">
                                  <span class="card-date-label">Updated:</span>
                                  <time
                                    datetime={post.data.lastUpdated.toISOString()}
                                    class="meta-date"
                                  >
                                    {formatDate(post.data.lastUpdated)}
                                  </time>
                                </div>
                              )}
                            </div>
                            <div class="meta-tags">
                              {post.data.tags?.map((tag) => (
                                <a class="chip" href={`/blog?tag=${encodeURIComponent(tag)}`}>
                                  #{tag}
                                </a>
                              ))}
                            </div>
                          </div>
                        </div>
                      </article>
                    ))}
                </div>
              </div>
            ))
          }
        </section>
      </main>
    </div>
  </div>

  <style>
    .blog-page {
      max-width: 100%;
    }

    .blog-header {
      text-align: center;
      max-width: var(--content-width-serious);
      margin: 0 auto var(--space-xs);
    }

    .page-title {
      font-size: clamp(var(--text-2xl), 5vw, var(--text-3xl));
      margin-bottom: var(--space-xs);
      color: var(--color-ink-dark);
    }

    .page-description {
      font-size: var(--text-lg);
      line-height: 1.6;
      color: var(--color-ink-medium);
      font-style: italic;
    }

    .blog-container {
      position: relative;
      max-width: var(--content-width-serious);
      margin: 0 auto;
    }
    .blog-content {
      position: relative;
    }
    .blog-sidebar {
      position: absolute;
      right: calc(-12.5rem - var(--space-lg));
      top: calc(var(--space-xl) + 1px);
      width: 13rem;
    }
    .sidebar-section {
      background-color: var(--color-surface);
      border: 1px solid var(--color-lichen);
      border-radius: var(--border-radius);
      padding: 0 var(--space-sm) var(--space-xs);
      margin-bottom: var(--space-sm);
    }
    .sidebar-section h3 {
      font-size: var(--text-md);
      margin: var(--space-xs) 0 var(--space-xs) 0;
      color: var(--color-text-primary);
      font-weight: var(--font-weight-semibold);
    }
    .filter-list {
      list-style: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-wrap: wrap;
      gap: 0.025rem 0.25rem;
    }
    .filter-btn {
      color: var(--color-text-secondary);
      background: var(--color-surface);
      border: 1px solid var(--color-lichen);
      font-size: var(--text-xs);
      font-family: inherit;
      padding: 0.1rem 0.35rem;
      border-radius: 999px;
      cursor: pointer;
      transition: all var(--transition-fast);
    }
    .filter-btn:hover {
      color: var(--color-link-hover);
      background: var(--wash-sage);
      border-color: var(--color-sage);
    }
    .filter-btn.active {
      color: var(--color-text-primary);
      font-weight: var(--font-weight-semibold);
      border-color: var(--color-link);
    }

    .cards-grid {
      display: grid;
      gap: var(--space-xs);
    }
    .year-heading {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      gap: var(--space-sm);
      margin: var(--space-xs) 0 var(--space-sm);
      color: var(--color-walnut);
      font-family: var(--font-heading);
      font-weight: 600;
      font-size: var(--text-lg);
    }
    .year-heading .vine {
      height: 1px;
      background: linear-gradient(
        to right,
        transparent,
        color-mix(in srgb, var(--color-lichen) 60%, transparent),
        transparent
      );
    }
    .year-heading .year-text {
      font-variant-caps: small-caps;
      letter-spacing: 0.06em;
    }
    .cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: var(--space-sm);
      margin-bottom: var(--space-sm);
    }

    .post-card {
      position: relative;
      background: var(--color-surface);
      border: 1px solid var(--color-lichen);
      border-radius: var(--border-radius);
      overflow: hidden;
      transition:
        transform var(--transition-medium),
        box-shadow var(--transition-medium),
        border-color var(--transition-medium);
      box-shadow: 0 4px 10px color-mix(in srgb, var(--color-walnut) 5%, transparent);
    }
    .post-card:hover {
      transform: translateY(-1px);
      border-color: var(--color-sage);
      box-shadow: 0 6px 16px color-mix(in srgb, var(--color-walnut) 7%, transparent);
      cursor: pointer;
    }
    .post-card .card-link {
      display: block;
      position: absolute;
      inset: 0;
      z-index: 1;
      pointer-events: none;
    }
    .post-card .card-body,
    .post-card .thumb {
      position: relative;
      z-index: 2;
      pointer-events: auto;
    }
    .post-card .card-title a,
    .post-card .meta-tags a {
      position: relative;
      z-index: 3;
      pointer-events: auto;
    }
    .thumb {
      margin: 0;
      aspect-ratio: 8/3;
      width: 100%;
      background: var(--color-surface);
      position: relative;
      overflow: hidden;
    }

    .thumb-wrapper {
      width: 100%;
      height: 100%;
      overflow: hidden;
      transform-origin: center center;
      position: relative;
    }

    .thumb-inner {
      width: 100%;
      height: 100%;
      display: block;
      transform: translate(-50%, -50%);
      position: absolute;
      top: 50%;
      left: 50%;
      overflow: hidden;
    }

    .thumb-inner img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      filter: saturate(0.85) contrast(0.95);
      opacity: 0.9;
    }
    .card-body {
      padding: var(--space-xs) var(--space-sm);
    }
    .card-title {
      margin: 0 0 var(--space-xxs, 0.25rem);
      font-size: var(--text-md);
    }
    .card-excerpt {
      color: var(--color-text-secondary);
      margin: 0 0 var(--space-xs);
      display: -webkit-box;
      -webkit-line-clamp: 5;
      -webkit-box-orient: vertical;
      overflow: hidden;
      font-size: var(--text-sm);
      line-height: 1.4;
    }
    .card-meta {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: var(--space-xxs, 0.25rem);
      flex-wrap: wrap;
    }

    .card-dates {
      display: flex;
      gap: var(--space-sm);
      align-items: baseline;
      flex-wrap: wrap;
    }

    .card-date-item {
      display: flex;
      gap: 0.25rem;
      align-items: baseline;
      white-space: nowrap;
    }

    .card-date-label {
      font-size: calc(var(--text-xs, 0.7rem) * 0.85);
      color: var(--color-text-muted);
      letter-spacing: 0.05em;
      opacity: 0.8;
    }

    .meta-date {
      font-size: var(--text-xxs, 0.7rem);
      color: var(--color-text-muted);
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    .meta-tags {
      display: flex;
      gap: var(--space-xxs, 0.25rem);
      flex-wrap: wrap;
    }
    .chip {
      position: relative;
      font-size: var(--text-xxs, 0.7rem);
      color: var(--color-accent-secondary);
      background: var(--wash-sage);
      padding: 0.15em 0.55em;
      border-radius: 999px;
      text-decoration: none;
      border: 1px solid var(--color-lichen);
      letter-spacing: 0.02em;
    }

    .chip:hover {
      color: var(--color-link-hover);
      background: color-mix(in srgb, var(--wash-sage) 60%, transparent);
      border-color: var(--color-sage);
    }

    @media (max-width: 1024px) {
      .blog-content {
        position: static;
      }
      .blog-sidebar {
        position: static;
        width: auto;
        margin-top: var(--space-lg);
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
        gap: var(--space-md);
      }
    }
    @media (max-width: 480px) {
      .card-title {
        font-size: var(--text-md);
      }
    }

    .post-card.hidden {
      display: none;
    }
    .year-group.hidden {
      display: none;
    }
  </style>

  <script>
    // Make whole card clickable except on interactive elements
    document.addEventListener('click', function (e) {
      const card = (e.target as HTMLElement).closest?.('.post-card');
      if (!card) return;
      const isInteractive = (e.target as HTMLElement).closest?.('a, button');
      if (isInteractive) return;
      const href = card.getAttribute('data-href');
      if (href) window.location.href = href;
    });
    // Client-side filtering with TypeScript types
    let activeYear: string = '';
    let activeTag: string = '';

    /**
     * Filter posts based on active year and tag
     */
    function filterPosts(): void {
      const posts: NodeListOf<HTMLElement> = document.querySelectorAll('.post-card');
      const yearGroups: NodeListOf<HTMLElement> = document.querySelectorAll('.year-group');

      posts.forEach((post) => {
        const postYear = post.getAttribute('data-year');
        const postTagsAttr = post.getAttribute('data-tags');
        const postTags = postTagsAttr ? postTagsAttr.split(',') : [];

        const yearMatch = !activeYear || postYear === activeYear;
        const tagMatch = !activeTag || postTags.includes(activeTag);

        if (yearMatch && tagMatch) {
          post.classList.remove('hidden');
        } else {
          post.classList.add('hidden');
        }
      });

      // Hide year groups that have no visible posts
      yearGroups.forEach((yearGroup) => {
        const visiblePosts = yearGroup.querySelectorAll('.post-card:not(.hidden)');
        if (visiblePosts.length === 0) {
          yearGroup.classList.add('hidden');
        } else {
          yearGroup.classList.remove('hidden');
        }
      });
    }

    /**
     * Update active states of filter buttons
     */
    function updateActiveStates(): void {
      // Update year buttons
      document.querySelectorAll('[data-filter-year]').forEach((btn) => {
        const year = btn.getAttribute('data-filter-year');
        btn.classList.toggle('active', year === activeYear);
      });

      // Update tag buttons
      document.querySelectorAll('[data-filter-tag]').forEach((btn) => {
        const tag = btn.getAttribute('data-filter-tag');
        btn.classList.toggle('active', tag === activeTag);
      });
    }

    // Year filter event listeners
    document.querySelectorAll('[data-filter-year]').forEach((btn) => {
      btn.addEventListener('click', () => {
        activeYear = btn.getAttribute('data-filter-year') || '';
        filterPosts();
        updateActiveStates();
      });
    });

    // Tag filter event listeners
    document.querySelectorAll('[data-filter-tag]').forEach((btn) => {
      btn.addEventListener('click', () => {
        activeTag = btn.getAttribute('data-filter-tag') || '';
        filterPosts();
        updateActiveStates();
      });
    });

    // Initialize from query params
    const params = new URLSearchParams(location.search);
    const qYear = params.get('year') || '';
    const qTag = params.get('tag') || '';
    if (qYear) activeYear = qYear;
    if (qTag) activeTag = qTag;
    filterPosts();
    updateActiveStates();
  </script>
</BaseLayout>
