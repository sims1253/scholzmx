---
import BotanicalBorder from '../components/BotanicalBorder.astro';
import IllustratedFooter from '../components/IllustratedFooter.astro';

// Import CSS files
import '../styles/tokens.colors.css';
import '../styles/tokens.typography.css';
import '../styles/layout.css';
import '../styles/base.css';
import '../styles/dropcap.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  addBorders?: boolean;
  footerVariant?: 'projects' | 'writing' | 'research' | 'default';
  includeQuoteSection?: boolean;
  longform?: boolean;
  personal?: boolean;
}

const {
  title,
  description = 'A digital garden and personal website - thoughtful, slow web principles with a warm, botanical aesthetic.',
  image = '/img/portrait-DY3LVcsu_ZVN2ds.webp',
  addBorders = true,
  footerVariant = 'default',
  includeQuoteSection = false,
  longform = false,
  personal = true,
} = Astro.props;

const currentPath = Astro.url.pathname;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Canonical URL -->
    <link rel="canonical" href={`https://www.scholzmx.com${Astro.url.pathname}`} />

    <!-- RSS Feed autodiscovery -->
    <link rel="alternate" type="application/rss+xml" title="Grotto RSS Feed" href={new URL('rss.xml', Astro.site)} />

    <!-- Critical resource hints for performance -->

    <slot name="head" />

    <link
      rel="preload"
      href="/katex/fonts/KaTeX_Main-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/katex/katex.min.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript><link rel="stylesheet" href="/katex/katex.min.css" /></noscript>

    <!-- Fira Code for code blocks -->
    <link
      rel="preload"
      href="/fonts/FiraCode-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/FiraCode-Medium.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Always load initials (dropcaps) CSS, small footprint -->
    <link rel="stylesheet" href="/fonts/et-initials.css" />

    <!-- Load critical font CSS synchronously -->
    <link rel="stylesheet" href="/fonts/cormorant.css" />

    <!-- Load non-critical fonts asynchronously -->
    <link
      rel="preload"
      href="/fonts/alegreya.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript><link rel="stylesheet" href="/fonts/alegreya.css" /></noscript>

    <!-- Only preload fonts critical for initial render -->
    <link
      rel="preload"
      href="/fonts/et-book-roman-old-style-figures.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/cormorant-garamond-600.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/cormorant-garamond-400.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />


    <!-- Performance hints - will be updated by theme toggle -->
    <meta name="theme-color" content="#f9f6f2" />
    <meta name="color-scheme" content="light dark" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.href} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url.href} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />

    <!-- Creative Commons License -->
    <link rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/" />

    <title>{title}</title>
  </head>

  <body
    class={longform
      ? personal
        ? 'longform personal-content'
        : 'longform serious-content'
      : undefined}
  >
    <div class="page-wrapper">
      <!-- Organic botanical borders -->
      {
        addBorders && (
          <div>
            <BotanicalBorder position="top" variant="vine" intensity="light" />
            <BotanicalBorder position="left" variant="vine" intensity="light" />
            <BotanicalBorder position="right" variant="vine" intensity="light" />
          </div>
        )
      }

      <!-- Navigation and Content in scrollable area -->
      <div class="nav-and-content-area">
        <nav class="page-nav" role="navigation" aria-label="Main navigation">
          <div class="nav-content">
            <div class="nav-brand">
              <a href="/" class="site-logo" aria-label="Home">
                <span class="logo-text" aria-hidden="false">Grotto</span>
              </a>
            </div>

            <div class="nav-links">
              <a
                href="/blog"
                class={currentPath.startsWith('/blog') ? 'nav-link active' : 'nav-link'}>Blog</a
              >
              <span class="nav-separator">·</span>
              <a
                href="/projects"
                class={currentPath.startsWith('/projects') ? 'nav-link active' : 'nav-link'}
                >Projects</a
              >
              <span class="nav-separator">·</span>
              <a
                href="/research"
                class={currentPath.startsWith('/research') ? 'nav-link active' : 'nav-link'}
                >Research</a
              >
              <button
                id="nav-theme-toggle"
                class="torch-toggle"
                aria-label="Toggle theme"
                title="Toggle day/night"
                type="button"
              >
                <svg
                  class="torch-icon"
                  viewBox="0 0 64 64"
                  width="22"
                  height="22"
                  aria-hidden="true"
                >
                  <defs>
                    <linearGradient id="flame" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="0%" stop-color="var(--color-ochre)"></stop>
                      <stop offset="60%" stop-color="var(--color-walnut)"></stop>
                      <stop offset="100%" stop-color="var(--color-tansy)"></stop>
                    </linearGradient>
                  </defs>
                  <path
                    d="M32 8c6 7 4 13-1 18 5-1 8-5 8-10 5 5 7 13 2 19-4 5-12 6-18 3-7-4-7-12-2-17 0 6 6 9 10 7-3-2-5-6-5-9 0-2 1-5 6-11z"
                    fill="url(#flame)"
                    stroke="var(--color-ink-medium)"
                    stroke-width="1"></path>
                  <rect x="28" y="44" width="8" height="10" rx="2" fill="var(--color-ink-medium)"
                  ></rect>
                </svg>
              </button>
            </div>
          </div>

          <!-- Main content area -->
          <main class="main-content">
            <div class={personal ? "container personal" : "container"}>
              <slot />
            </div>
          </main>
        </nav>

        <!-- Illustrated Footer -->
        <div class="footer-area">
          <IllustratedFooter variant={footerVariant} includeQuoteSection={includeQuoteSection} />
        </div>
      </div>

      <style is:global>
        /* Shiki dual theme switching - component-specific theme handling */
        [data-theme="dark"] .astro-code,
        [data-theme="dark"] .astro-code span {
          color: var(--shiki-dark) !important;
          background-color: var(--shiki-dark-bg) !important;
          font-style: var(--shiki-dark-font-style) !important;
          font-weight: var(--shiki-dark-font-weight) !important;
          text-decoration: var(--shiki-dark-text-decoration) !important;
        }

        @media (prefers-color-scheme: dark) {
          :not([data-theme]) .astro-code,
          :not([data-theme]) .astro-code span {
            color: var(--shiki-dark) !important;
            background-color: var(--shiki-dark-bg) !important;
            font-style: var(--shiki-dark-font-style) !important;
            font-weight: var(--shiki-dark-font-weight) !important;
            text-decoration: var(--shiki-dark-text-decoration) !important;
          }
        }
      </style>

      <script>

        (function () {
          const KEY = 'theme-preference';
          const root = document.documentElement;
          const btn = document.getElementById('nav-theme-toggle');
          function apply(v) {
            if (!v) {
              root.removeAttribute('data-theme');
              return;
            }
            root.setAttribute('data-theme', v);
          }
          function get() {
            return localStorage.getItem(KEY);
          }
          function set(v) {
            if (v) localStorage.setItem(KEY, v);
            else localStorage.removeItem(KEY);
          }
          function systemPref() {
            return matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
          }
          function effective() {
            return get() || systemPref();
          }
          function toggle() {
            const cur = effective();
            const next = cur === 'dark' ? 'light' : 'dark';
            set(next);
            apply(next);
          }
          apply(get());
          btn && btn.addEventListener('click', toggle);
        })();

        // Copy button functionality for code blocks
        document.addEventListener('DOMContentLoaded', function () {
          document.querySelectorAll('.astro-code').forEach(function (codeBlock) {
            const button = document.createElement('button');
            button.className = 'copy-button';
            button.type = 'button';
            button.textContent = 'Copy';
            button.setAttribute('aria-label', 'Copy code to clipboard');

            button.addEventListener('click', async function (e) {
              e.stopPropagation();
              try {
                const codeElement = codeBlock.querySelector('code');
                const codeContent = codeElement ? codeElement.textContent || '' : '';
                await navigator.clipboard.writeText(codeContent);
                button.textContent = 'Copied!';
                button.classList.add('copied');
                setTimeout(function () {
                  button.textContent = 'Copy';
                  button.classList.remove('copied');
                }, 2000);
              } catch (err) {
                const codeElement = codeBlock.querySelector('code');
                const codeContent = codeElement ? codeElement.textContent || '' : '';
                const textArea = document.createElement('textarea');
                textArea.value = codeContent;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                button.textContent = 'Copied!';
                button.classList.add('copied');
                setTimeout(function () {
                  button.textContent = 'Copy';
                  button.classList.remove('copied');
                }, 2000);
              }
            });

            codeBlock.appendChild(button);
          });
        });
      </script>
    </div>
  </body>
</html>
