---
// Import shared quotes data to avoid duplication between server and client
import { personalQuotes } from '../data/quotes.js';

// Get random quote for initial display
const getRandomQuote = () => personalQuotes[Math.floor(Math.random() * personalQuotes.length)];
const initialQuote = getRandomQuote();
---

<div class="quote-container" id="quote-container">
  <blockquote class="daily-quote">
    <p class="quote-text" id="quote-text">{initialQuote.text}</p>
    <footer class="quote-attribution">
      <cite class="quote-author" id="quote-author">— {initialQuote.author}</cite>
    </footer>
  </blockquote>
  <button
    class="refresh-quote"
    id="refresh-quote"
    title="Get a new quote"
    aria-label="Get a new quote"
  >
    <span class="refresh-icon">↻</span>
  </button>
</div>

<script>
  // Import shared quotes data to ensure consistency with server-side rendering
  import { personalQuotes } from '../data/quotes.js';

  function getRandomQuote() {
    return personalQuotes[Math.floor(Math.random() * personalQuotes.length)];
  }

  function updateQuote() {
    const newQuote = getRandomQuote();
    const quoteText = document.getElementById('quote-text');
    const quoteAuthor = document.getElementById('quote-author');
    const container = document.getElementById('quote-container');

    if (quoteText && quoteAuthor && container) {
      // Add fade out class
      container.style.opacity = '0.5';
      container.style.transform = 'translateY(5px)';

      setTimeout(() => {
        quoteText.textContent = newQuote.text;
        quoteAuthor.textContent = `— ${newQuote.author}`;

        // Fade back in
        container.style.opacity = '1';
        container.style.transform = 'translateY(0)';
      }, 200);
    }
  }

  // Add click handler when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const refreshButton = document.getElementById('refresh-quote');
    const container = document.getElementById('quote-container');

    if (refreshButton) {
      refreshButton.addEventListener('click', updateQuote);
    }

    // Also allow clicking the whole quote container
    if (container) {
      container.addEventListener('click', updateQuote);
      container.style.cursor = 'pointer';
    }
  });
</script>

<style>
  .quote-container {
    position: relative;
    margin: 0;
    padding: 0;
    background: transparent;
    border: none;
    box-shadow: none;
  }

  .daily-quote {
    margin: 0;
    padding: 0;
    border: none;
    background: none;
    position: relative;
  }

  /* Override global blockquote quotation mark */
  .daily-quote::before {
    display: none;
  }

  .quote-text {
    font-size: var(--text-sm);
    font-style: italic;
    line-height: var(--spacing-line-height);
    color: var(--color-ink-dark);
    margin: 0;
    padding: 0;
    font-family: var(--font-body-personal); /* Ensure consistent Alegreya usage */
  }

  .quote-attribution {
    text-align: right;
    margin: 0;
  }

  .quote-author {
    font-size: var(--text-xs);
    font-style: normal;
    font-weight: 500;
    color: var(--color-ink-medium);
    font-family: var(--font-body-personal); /* Alegreya for footer vibes */
  }

  /* Hover effect for subtle interactivity */
  .quote-container:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(139, 90, 60, 0.08);
    transition: all var(--transition-medium);
  }

  .refresh-quote {
    position: absolute;
    top: var(--space-sm);
    right: var(--space-sm);
    background: none;
    border: none;
    color: var(--color-ink-light);
    font-size: var(--text-md);
    cursor: pointer;
    opacity: 0;
    transition: all var(--transition-medium);
    padding: var(--space-xs);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .quote-container:hover .refresh-quote {
    opacity: 0.6;
  }

  .refresh-quote:hover {
    opacity: 1 !important;
    background-color: rgba(139, 90, 60, 0.1);
    transform: rotate(180deg);
  }

  .refresh-icon {
    display: block;
    line-height: 1;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .quote-container {
      margin: var(--space-lg) 0;
      padding: var(--space-md);
    }

    .quote-text {
      font-size: var(--text-md);
      padding-left: var(--space-sm);
    }
  }
</style>
