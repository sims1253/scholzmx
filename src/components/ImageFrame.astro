---
// Unified image component that handles all image positioning and framing needs
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

export interface Props {
  // Core image props
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';

  // Positioning & scaling
  positionX?: number; // Horizontal position as percentage (-50 to 50, where 0 is center)
  positionY?: number; // Vertical position as percentage (-50 to 50, where 0 is center)
  scale?: number; // Scale/zoom factor (e.g., 1.2 for 20% zoom in)
  fillMode?: 'cover' | 'contain' | 'fill'; // How to handle image fitting when no scale/position given

  // Frame styling
  style?: 'botanical' | 'polaroid' | 'gentle-oval' | 'hero' | 'simple';
  size?: 'small' | 'medium' | 'large' | 'custom';
  aspectRatio?: string; // e.g., "8/3" for hero, "1/1" for portraits

  // Container styling
  className?: string;
  containerClass?: string;

  // Dual image support
  alternateSrc?: string | ImageMetadata; // Second image to toggle to
  alternateAlt?: string; // Alt text for second image
  alternatePositionX?: number; // Position for second image
  alternatePositionY?: number; // Position for second image
  alternateScale?: number; // Scale for second image
  alternateFillMode?: 'cover' | 'contain' | 'fill'; // Fill mode for second image
  clickable?: boolean; // Whether the frame should be clickable (auto-enabled if alternateSrc provided)
}

const {
  src,
  alt,
  width,
  height,
  loading = 'lazy',
  positionX,
  positionY,
  scale,
  fillMode = 'cover',
  style = 'simple',
  size = 'medium',
  aspectRatio,
  className = '',
  containerClass = '',
  alternateSrc,
  alternateAlt,
  alternatePositionX,
  alternatePositionY,
  alternateScale,
  alternateFillMode,
  clickable,
} = Astro.props;

// Smart defaults: if no positioning/scaling is provided, use simple fill mode
const useCustomPositioning =
  positionX !== undefined || positionY !== undefined || scale !== undefined;
const finalPositionX = positionX || 0;
const finalPositionY = positionY || 0;
const finalScale = scale || 1;

// Dual image support
const isClickable = clickable || alternateSrc !== undefined;
const useAlternateCustomPositioning =
  alternatePositionX !== undefined ||
  alternatePositionY !== undefined ||
  alternateScale !== undefined;
const finalAlternatePositionX = alternatePositionX || 0;
const finalAlternatePositionY = alternatePositionY || 0;
const finalAlternateScale = alternateScale || 1;
const finalAlternateFillMode = alternateFillMode || fillMode;

// Size mappings for portrait frame styles
const portraitSizeMap = {
  small: {
    botanical: { width: '120px', height: '120px' },
    polaroid: { width: '120px', height: '120px' },
    'gentle-oval': { width: '110px', height: '130px' },
  },
  medium: {
    botanical: { width: '160px', height: '160px' },
    polaroid: { width: '160px', height: '160px' },
    'gentle-oval': { width: '150px', height: '170px' },
  },
  large: {
    botanical: { width: '200px', height: '200px' },
    polaroid: { width: '200px', height: '200px' },
    'gentle-oval': { width: '180px', height: '210px' },
  },
};

// Determine final dimensions
let finalWidth: string | number;
let finalHeight: string | number;

if (style === 'hero') {
  // Hero images use viewport-relative sizing with custom aspect ratio
  finalWidth = width || 'calc(min(75vw, 1100px) + 4rem)';
  finalHeight = height || 'auto';
} else if (style === 'simple') {
  // Simple images use natural sizing or provided dimensions
  finalWidth = width || '100%';
  finalHeight = height || 'auto';
} else {
  // Portrait frames use size mapping
  if (size === 'custom') {
    // For custom size, use provided width/height or fallback to medium defaults
    finalWidth = width || portraitSizeMap.medium.botanical.width;
    finalHeight = height || portraitSizeMap.medium.botanical.height;
  } else {
    const frameSize = portraitSizeMap[size][style] || portraitSizeMap.medium.botanical;
    finalWidth = width || frameSize.width;
    finalHeight = height || frameSize.height;
  }
}

// Parse dimensions for Image component
const imageWidth = typeof finalWidth === 'string' ? parseInt(finalWidth) || 800 : finalWidth;
const imageHeight = typeof finalHeight === 'string' ? parseInt(finalHeight) || 400 : finalHeight;
---

<div
  class={`image-frame image-frame-${style} ${className} ${isClickable ? 'clickable' : ''} ${containerClass} ${
    style === 'hero' 
      ? 'tw-w-full tw-max-w-5xl tw-mx-auto tw-px-8 tw--mt-lg tw-mb-lg tw-aspect-[8/3] md:tw-aspect-[8/3] sm:tw-aspect-[4/3]' 
      : ''
  }`}
  style={`${aspectRatio ? `aspect-ratio: ${aspectRatio};` : ''} ${style !== 'hero' && style !== 'simple' ? `width: ${finalWidth}; height: ${finalHeight};` : ''}`}
  role={isClickable ? 'button' : undefined}
  tabindex={isClickable ? '0' : undefined}
  aria-label={isClickable
    ? `Click to toggle between ${alt} and ${alternateAlt || 'alternate image'}`
    : undefined}
>
  {
    useCustomPositioning ? (
      <div
        class="image-wrapper primary-image"
        style={`transform: scale(${finalScale}) translate(${finalPositionX}%, ${finalPositionY}%);`}
      >
        <div class="frame-image custom-positioning">
          {typeof src === 'string' ? (
            <img src={src} alt={alt} width={imageWidth} height={imageHeight} loading={loading} />
          ) : (
            <Image
              src={src}
              alt={alt}
              width={imageWidth}
              height={imageHeight}
              widths={style === 'hero' ? [400, 600, 800, 1100] : [imageWidth]}
              sizes={
                style === 'hero'
                  ? '(max-width: 768px) 400px, (max-width: 1200px) 600px, 800px'
                  : `${imageWidth}px`
              }
              format="webp"
              loading={loading}
            />
          )}
        </div>
      </div>
    ) : (
      <div class={`frame-image simple-fill fill-${fillMode} primary-image`}>
        {typeof src === 'string' ? (
          <img src={src} alt={alt} width={imageWidth} height={imageHeight} loading={loading} />
        ) : (
          <Image
            src={src}
            alt={alt}
            width={imageWidth}
            height={imageHeight}
            widths={style === 'hero' ? [400, 600, 800, 1100] : [imageWidth]}
            sizes={
              style === 'hero'
                ? '(max-width: 768px) 400px, (max-width: 1200px) 600px, 800px'
                : `${imageWidth}px`
            }
            format="webp"
            loading={loading}
          />
        )}
      </div>
    )
  }

  {
    alternateSrc &&
      (useAlternateCustomPositioning ? (
        <div
          class="image-wrapper alternate-image"
          style={`transform: scale(${finalAlternateScale}) translate(${finalAlternatePositionX}%, ${finalAlternatePositionY}%);`}
        >
          <div class="frame-image custom-positioning">
            {typeof alternateSrc === 'string' ? (
              <img
                src={alternateSrc}
                alt={alternateAlt || alt}
                width={imageWidth}
                height={imageHeight}
                loading="lazy"
              />
            ) : (
              <Image
                src={alternateSrc}
                alt={alternateAlt || alt}
                width={imageWidth}
                height={imageHeight}
                widths={style === 'hero' ? [400, 600, 800, 1100] : [imageWidth]}
                sizes={
                  style === 'hero'
                    ? '(max-width: 768px) 400px, (max-width: 1200px) 600px, 800px'
                    : `${imageWidth}px`
                }
                format="webp"
                loading="lazy"
              />
            )}
          </div>
        </div>
      ) : (
        <div class={`frame-image simple-fill fill-${finalAlternateFillMode} alternate-image`}>
          {typeof alternateSrc === 'string' ? (
            <img
              src={alternateSrc}
              alt={alternateAlt || alt}
              width={imageWidth}
              height={imageHeight}
              loading="lazy"
            />
          ) : (
            <Image
              src={alternateSrc}
              alt={alternateAlt || alt}
              width={imageWidth}
              height={imageHeight}
              widths={style === 'hero' ? [400, 600, 800, 1100] : [imageWidth]}
              sizes={
                style === 'hero'
                  ? '(max-width: 768px) 400px, (max-width: 1200px) 600px, 800px'
                  : `${imageWidth}px`
              }
              format="webp"
              loading="lazy"
            />
          )}
        </div>
      ))
  }
</div>

<style>
  /* Base image frame styles */
  .image-frame {
    position: relative;
    margin: 0 auto;
    overflow: hidden;
    display: block;
  }

  .image-wrapper {
    width: 100%;
    height: 100%;
    overflow: hidden;
    transform-origin: center center;
    position: relative;
  }

  /* Custom positioning mode - for precise control */
  .frame-image.custom-positioning {
    width: 100%;
    height: 100%;
    display: block;
    transform: translate(-50%, -50%);
    position: absolute;
    top: 50%;
    left: 50%;
    overflow: hidden;
  }

  .frame-image.custom-positioning img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  /* Simple fill modes - for easy default usage */
  .frame-image.simple-fill {
    width: 100%;
    height: 100%;
    display: block;
    overflow: hidden;
  }

  .frame-image.simple-fill img {
    width: 100%;
    height: 100%;
  }

  .frame-image.fill-cover img {
    object-fit: cover; /* Fill frame, crop excess */
  }

  .frame-image.fill-contain img {
    object-fit: contain; /* Show full image, letterbox if needed */
  }

  .frame-image.fill-fill img {
    object-fit: fill; /* Stretch to fit frame exactly */
  }

  /* Hero image style - for blog post headers */
  .image-frame-hero {
    background: var(--color-background);
    /* No border-radius or box-shadow for seamless integration */
  }

  /* Simple image style - for basic usage */
  .image-frame-simple {
    border-radius: var(--border-radius);
    box-shadow: 0 4px 12px rgba(139, 90, 60, 0.15);
  }

  /* Portrait frame styles - copied from PortraitFrame */
  .image-frame-botanical,
  .image-frame-polaroid,
  .image-frame-gentle-oval {
    border: 3px solid var(--color-parchment-light);
    background-color: var(--color-parchment-light);
    box-shadow: 0 6px 16px rgba(139, 90, 60, 0.2);
  }

  /* Clickable frame styles */
  .image-frame.clickable {
    cursor: pointer;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
  }

  .image-frame.clickable:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(139, 90, 60, 0.25);
  }

  .image-frame.clickable:active {
    transform: translateY(-1px);
  }

  .image-frame.clickable:focus {
    outline: none; /* Remove focus outline */
  }

  /* Only show focus outline when navigating with keyboard */
  .image-frame.clickable:focus-visible {
    outline: 2px solid var(--color-moss);
    outline-offset: 2px;
  }

  /* Dual image toggle */
  .alternate-image {
    opacity: 0;
    transition: opacity 0.3s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .image-frame.show-alternate .primary-image {
    opacity: 0;
  }

  .image-frame.show-alternate .alternate-image {
    opacity: 1;
  }

  /* Enhanced shadows for clickable frames */
  .image-frame-botanical.clickable:hover {
    box-shadow: 0 10px 22px rgba(139, 90, 60, 0.28);
  }

  .image-frame-polaroid.clickable:hover {
    box-shadow: 0 10px 24px rgba(139, 90, 60, 0.3);
  }

  .image-frame-gentle-oval.clickable:hover {
    box-shadow: 0 8px 20px rgba(139, 90, 60, 0.25);
  }

  /* Botanical Scallops Style */
  .image-frame-botanical {
    clip-path: polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%);
    border-radius: 0;
    box-shadow: 0 8px 18px rgba(139, 90, 60, 0.22);
  }

  /* Vintage Polaroid Style */
  .image-frame-polaroid {
    border-radius: 8px;
    border: 12px solid #fff;
    border-bottom: 24px solid #fff;
    box-shadow: 0 8px 20px rgba(139, 90, 60, 0.25);
    background: #fff;
  }

  /* Gentle Oval Style */
  .image-frame-gentle-oval {
    border-radius: 50%;
    box-shadow: 0 6px 16px rgba(139, 90, 60, 0.2);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .image-frame-botanical,
    .image-frame-polaroid,
    .image-frame-gentle-oval {
      max-width: 140px;
      max-height: 140px;
    }

    .image-frame-gentle-oval {
      max-width: 120px;
      max-height: 140px;
    }

  }
</style>

{isClickable && <script src="/scripts/image-frame-toggle.js" is:inline />}
