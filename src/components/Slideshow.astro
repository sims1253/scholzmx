---
import { Image } from "astro:assets";

export interface Props {
  images: Array<{
    src: string | ImageMetadata;
    alt: string;
    caption?: string;
    title?: string;
  }>;
  autoPlay?: boolean;
  interval?: number;
  showControls?: boolean;
  showIndicators?: boolean;
}

const {
  images,
  autoPlay = false,
  interval = 5000,
  showControls = true,
  showIndicators = true,
} = Astro.props;

const slideshowId = `slideshow-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="slideshow-container" data-slideshow-id={slideshowId}>
  <div class="slideshow-wrapper">
    <div class="slides-container" role="region" aria-label="Image slideshow">
      {
        images.map((image, index) => (
          <div
            class={`slide ${index === 0 ? "active" : ""}`}
            data-slide={index}
            role="img"
            aria-label={image.alt}
          >
            {typeof image.src === "string" ? (
              <img
                src={image.src}
                alt={image.alt}
                title={image.title || image.alt}
                loading={index === 0 ? "eager" : "lazy"}
              />
            ) : (
              <Image
                src={image.src}
                alt={image.alt}
                title={image.title || image.alt}
                loading={index === 0 ? "eager" : "lazy"}
                width={640}
                height={480}
                widths={[200, 280, 320, 400, 480, 640]}
                sizes="(max-width: 480px) 200px, (max-width: 768px) 280px, (max-width: 1024px) 400px, 640px"
                format="webp"
                class="slideshow-image"
              />
            )}
            {image.caption && (
              <div class="slide-caption">
                <p>{image.caption}</p>
              </div>
            )}
          </div>
        ))
      }
    </div>

    {
      showControls && images.length > 1 && (
        <div class="slideshow-controls">
          <button
            class="control-btn prev-btn"
            aria-label="Previous image"
            data-action="prev"
          >
            <span aria-hidden="true">‹</span>
          </button>
          <button
            class="control-btn next-btn"
            aria-label="Next image"
            data-action="next"
          >
            <span aria-hidden="true">›</span>
          </button>
        </div>
      )
    }
  </div>

  {
    showIndicators && images.length > 1 && (
      <div
        class="slideshow-indicators"
        role="tablist"
        aria-label="Slide indicators"
      >
        {images.map((_, index) => (
          <button
            class={`indicator ${index === 0 ? "active" : ""}`}
            data-slide-to={index}
            role="tab"
            aria-label={`Go to slide ${index + 1}`}
            aria-selected={index === 0 ? "true" : "false"}
          >
            <span aria-hidden="true">❦</span>
          </button>
        ))}
      </div>
    )
  }

  <div class="slideshow-ornament" aria-hidden="true">✿</div>
</div>

<script define:vars={{ autoPlay, interval, slideshowId }}>
  // Slideshow functionality with vanilla JavaScript
  document.addEventListener("DOMContentLoaded", function () {
    const container = document.querySelector(
      `[data-slideshow-id="${slideshowId}"]`,
    );
    if (!container) return;

    const slides = container.querySelectorAll(".slide");
    const indicators = container.querySelectorAll(".indicator");
    const prevBtn = container.querySelector(".prev-btn");
    const nextBtn = container.querySelector(".next-btn");

    let currentSlide = 0;
    let autoPlayTimer = null;

    function showSlide(index) {
      // Hide all slides
      slides.forEach((slide) => slide.classList.remove("active"));
      indicators.forEach((indicator) => {
        indicator.classList.remove("active");
        indicator.setAttribute("aria-selected", "false");
      });

      // Show current slide
      if (slides[index]) {
        slides[index].classList.add("active");
        if (indicators[index]) {
          indicators[index].classList.add("active");
          indicators[index].setAttribute("aria-selected", "true");
        }
      }

      currentSlide = index;
    }

    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }

    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prev);
    }

    function startAutoPlay() {
      if (!autoPlay || slides.length <= 1) return;
      autoPlayTimer = setInterval(nextSlide, interval);
    }

    function stopAutoPlay() {
      if (autoPlayTimer) {
        clearInterval(autoPlayTimer);
        autoPlayTimer = null;
      }
    }

    // Event listeners
    if (nextBtn) {
      nextBtn.addEventListener("click", () => {
        stopAutoPlay();
        nextSlide();
        startAutoPlay();
      });
    }

    if (prevBtn) {
      prevBtn.addEventListener("click", () => {
        stopAutoPlay();
        prevSlide();
        startAutoPlay();
      });
    }

    indicators.forEach((indicator, index) => {
      indicator.addEventListener("click", () => {
        stopAutoPlay();
        showSlide(index);
        startAutoPlay();
      });
    });

    // Keyboard navigation
    container.addEventListener("keydown", (e) => {
      if (e.key === "ArrowLeft") {
        e.preventDefault();
        stopAutoPlay();
        prevSlide();
        startAutoPlay();
      } else if (e.key === "ArrowRight") {
        e.preventDefault();
        stopAutoPlay();
        nextSlide();
        startAutoPlay();
      }
    });

    // Pause on hover
    container.addEventListener("mouseenter", stopAutoPlay);
    container.addEventListener("mouseleave", startAutoPlay);

    // Start autoplay if enabled
    startAutoPlay();
  });
</script>

<style>
  .slideshow-container {
    position: relative;
    max-width: 100%;
    margin: var(--space-lg) 0;
    background-color: var(--color-parchment-light);
    border-radius: var(--border-radius);
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(139, 90, 60, 0.1);
    border: 1px solid rgba(139, 90, 60, 0.1);
  }

  .slideshow-wrapper {
    position: relative;
    aspect-ratio: 16 / 10;
    overflow: hidden;
  }

  .slides-container {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .slide {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity var(--transition-medium);
    display: flex;
    flex-direction: column;
  }

  .slide.active {
    opacity: 1;
  }

  .slide img,
  .slideshow-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0;
  }

  .slide-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(44, 36, 22, 0.8));
    color: var(--color-parchment-light);
    padding: var(--space-lg) var(--space-md) var(--space-md);
    font-size: var(--text-sm);
    line-height: 1.4;
  }

  .slide-caption p {
    margin: 0;
    font-style: italic;
  }

  /* Controls */
  .slideshow-controls {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 var(--space-sm);
    pointer-events: none;
  }

  .control-btn {
    background-color: rgba(250, 247, 240, 0.9);
    border: 1px solid rgba(139, 90, 60, 0.2);
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: var(--text-lg);
    color: var(--color-ink-dark);
    transition: all var(--transition-fast);
    pointer-events: auto;
    backdrop-filter: blur(4px);
  }

  .control-btn:hover {
    background-color: var(--color-parchment-light);
    border-color: var(--color-walnut);
    transform: scale(1.1);
    box-shadow: 0 2px 8px rgba(139, 90, 60, 0.2);
  }

  .control-btn:focus {
    outline: 2px solid var(--color-moss);
    outline-offset: 2px;
  }

  /* Indicators */
  .slideshow-indicators {
    display: flex;
    justify-content: center;
    gap: var(--space-sm);
    padding: var(--space-md);
    background-color: var(--color-parchment-light);
  }

  .indicator {
    background: none;
    border: none;
    width: 24px;
    height: 24px;
    border-radius: 50%;
    cursor: pointer;
    font-size: var(--text-sm);
    color: var(--color-ink-light);
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .indicator:hover {
    color: var(--color-walnut);
    transform: scale(1.2);
  }

  .indicator.active {
    color: var(--color-gold);
    transform: scale(1.3);
  }

  .indicator:focus {
    outline: 2px solid var(--color-moss);
    outline-offset: 2px;
  }

  /* Ornament */
  .slideshow-ornament {
    position: absolute;
    top: var(--space-sm);
    right: var(--space-sm);
    color: var(--color-gold);
    font-size: var(--text-sm);
    opacity: 0.6;
    pointer-events: none;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
  }

  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .slideshow-wrapper {
      aspect-ratio: 4 / 3;
    }

    .control-btn {
      width: 36px;
      height: 36px;
      font-size: var(--text-md);
    }

    .slide-caption {
      padding: var(--space-md) var(--space-sm) var(--space-sm);
      font-size: var(--text-xs);
    }

    .slideshow-indicators {
      padding: var(--space-sm);
      gap: var(--space-xs);
    }

    .indicator {
      width: 20px;
      height: 20px;
      font-size: var(--text-xs);
    }
  }

  @media (max-width: 480px) {
    .slideshow-wrapper {
      aspect-ratio: 1 / 1;
    }

    .slideshow-controls {
      padding: 0 var(--space-xs);
    }

    .control-btn {
      width: 32px;
      height: 32px;
    }
  }

  /* Accessibility improvements */
  @media (prefers-reduced-motion: reduce) {
    .slide {
      transition: none;
    }

    .control-btn,
    .indicator {
      transition: none;
    }
  }

  /* Focus management */
  .slideshow-container:focus-within .control-btn,
  .slideshow-container:focus-within .indicator {
    opacity: 1;
  }
</style>
