---
export interface Props {
  className?: string;
}

const { className = '' } = Astro.props;
---

<button
  id="back-to-top"
  class={`back-to-top ${className}`}
  aria-label="Back to top of page"
  title="Back to top"
  type="button"
>
  <!-- Botanical upward arrow with organic vine details -->
  <svg class="back-to-top-icon" viewBox="0 0 32 32" width="20" height="20" aria-hidden="true">
    <defs>
      <!-- Subtle organic texture for botanical feel -->
      <filter id="organicTexture" x="-20%" y="-20%" width="140%" height="140%">
        <feTurbulence baseFrequency="0.8" numOctaves="1" result="noise" seed="3"></feTurbulence>
        <feDisplacementMap in="SourceGraphic" in2="noise" scale="0.3"></feDisplacementMap>
      </filter>
    </defs>

    <!-- Main upward arrow path -->
    <path
      d="M16 8 L10 14 L13 14 L13 20 L19 20 L19 14 L22 14 L16 8 Z"
      fill="currentColor"
      filter="url(#organicTexture)"></path>

    <!-- Decorative vine flourishes -->
    <path
      d="M8 24 Q12 22 16 24 Q20 22 24 24"
      stroke="currentColor"
      stroke-width="1"
      fill="none"
      opacity="0.6"
      filter="url(#organicTexture)"></path>

    <!-- Small organic dots for botanical detail -->
    <circle cx="9" cy="26" r="0.8" fill="currentColor" opacity="0.4"></circle>
    <circle cx="23" cy="26" r="0.8" fill="currentColor" opacity="0.4"></circle>
  </svg>
</button>

<style>
  .back-to-top {
    /* Positioning */
    position: fixed;
    bottom: var(--space-lg);
    right: var(--space-lg);
    z-index: 1000;

    /* Size and shape */
    width: 48px;
    height: 48px;
    border-radius: 12px;

    /* Botanical styling */
    background: var(--color-moss);
    border: 1px solid color-mix(in srgb, var(--color-moss) 80%, var(--color-parchment));
    color: var(--color-parchment);

    /* Interactions */
    cursor: pointer;
    transition: all var(--transition-medium);

    /* Initial hidden state */
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;

    /* Button reset */
    outline: none;
    box-shadow: 0 4px 12px color-mix(in srgb, var(--color-moss) 30%, transparent);
  }

  .back-to-top.visible {
    opacity: 0.85;
    transform: translateY(0);
    pointer-events: auto;
  }

  .back-to-top:hover {
    background: var(--color-walnut);
    border-color: color-mix(in srgb, var(--color-walnut) 80%, var(--color-parchment));
    transform: translateY(-2px);
    box-shadow: 0 6px 16px color-mix(in srgb, var(--color-walnut) 40%, transparent);
    opacity: 1;
  }

  .back-to-top:focus-visible {
    background: var(--color-walnut);
    border-color: var(--color-ochre);
    transform: translateY(-1px);
    box-shadow:
      0 6px 16px color-mix(in srgb, var(--color-walnut) 40%, transparent),
      0 0 0 3px color-mix(in srgb, var(--color-ochre) 30%, transparent);
    opacity: 1;
  }

  .back-to-top:active {
    transform: translateY(0);
    box-shadow: 0 2px 8px color-mix(in srgb, var(--color-walnut) 40%, transparent);
  }

  .back-to-top-icon {
    display: block;
    transition: transform var(--transition-fast);
  }

  .back-to-top:hover .back-to-top-icon,
  .back-to-top:focus-visible .back-to-top-icon {
    transform: translateY(-1px);
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .back-to-top {
      bottom: var(--space-md);
      right: var(--space-md);
      width: 44px;
      height: 44px;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .back-to-top {
      border-width: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .back-to-top {
      transition: opacity var(--transition-fast);
    }

    .back-to-top:hover,
    .back-to-top:focus-visible {
      transform: none;
    }

    .back-to-top-icon {
      transition: none;
    }

    .back-to-top:hover .back-to-top-icon,
    .back-to-top:focus-visible .back-to-top-icon {
      transform: none;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const backToTopButton = document.getElementById('back-to-top');
    if (!backToTopButton) return;

    let isVisible = false;
    let ticking = false;

    // Threshold for showing the button (300px scroll)
    const showThreshold = 300;

    // Throttled scroll handler for performance
    function handleScroll() {
      if (!ticking) {
        requestAnimationFrame(() => {
          const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
          const shouldShow = scrollPosition > showThreshold;

          if (shouldShow !== isVisible) {
            isVisible = shouldShow;
            backToTopButton?.classList.toggle('visible', isVisible);
          }

          ticking = false;
        });
        ticking = true;
      }
    }

    // Smooth scroll to top function
    function scrollToTop() {
      window.scrollTo({
        top: 0,
        behavior: 'smooth',
      });
    }

    // Click handler
    backToTopButton.addEventListener('click', scrollToTop);

    // Keyboard handler (Enter and Space)
    backToTopButton.addEventListener('keydown', function (event) {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        scrollToTop();
      }
    });

    // Scroll listener with passive option for performance
    window.addEventListener('scroll', handleScroll, { passive: true });

    // Initial check in case page is already scrolled
    handleScroll();
  });
</script>
