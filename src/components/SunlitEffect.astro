---
// Sunlit streaming light effect component
// Adapted from https://github.com/jackyzha0/sunlit by Jacky Zhao

export interface Props {
  intensity?: 'subtle' | 'medium' | 'strong';
  autoTransition?: boolean;
  className?: string;
}

const { 
  intensity = 'subtle',
  autoTransition = false,
  className = ''
} = Astro.props;
---

<div class={`sunlit-effect ${className} sunlit-${intensity}`} id="sunlit-container">
  <!-- Glow layers for light reflection -->
  <div class="sunlit-glow"></div>
  <div class="sunlit-glow-bounce"></div>
  
  <!-- 3D perspective container -->
  <div class="sunlit-perspective">
    <!-- Animated leaves background -->
    <div class="sunlit-leaves">
      <svg style="width: 0; height: 0; position: absolute;" aria-hidden="true">
        <defs>
          <filter id="wind-effect" x="-20%" y="-20%" width="140%" height="140%">
            <feTurbulence type="fractalNoise" numOctaves="2" seed="1">
              <animate attributeName="baseFrequency" dur="16s" keyTimes="0;0.33;0.66;1"
                values="0.005 0.003;0.01 0.009;0.008 0.004;0.005 0.003" repeatCount="indefinite" />
            </feTurbulence>
            <feDisplacementMap in="SourceGraphic">
              <animate attributeName="scale" dur="20s" keyTimes="0;0.25;0.5;0.75;1" 
                values="45;55;75;55;45" repeatCount="indefinite" />
            </feDisplacementMap>
          </filter>
        </defs>
      </svg>
    </div>
    
    <!-- Window blinds effect -->
    <div class="sunlit-blinds">
      <div class="shutters">
        {Array.from({length: 23}, (_, i) => (
          <div class="shutter" key={i}></div>
        ))}
      </div>
      
      <!-- Vertical window bars -->
      <div class="vertical-bars">
        <div class="bar"></div>
        <div class="bar"></div>
      </div>
    </div>
    
    <!-- Progressive blur layers for depth -->
    <div class="blur-layer blur-1"></div>
    <div class="blur-layer blur-2"></div>
    <div class="blur-layer blur-3"></div>
    <div class="blur-layer blur-4"></div>
  </div>
  
  <!-- Content overlay (for anything that should appear above the effect) -->
  <div class="sunlit-content">
    <slot />
  </div>
</div>

<style>
  /* CSS Custom Properties for theming */
  .sunlit-effect {
    --sunlit-day: #faf7f0;
    --sunlit-evening: #f4e4b8;
    --sunlit-dusk: #e8c4a0;
    --sunlit-night: #2c2416;
    --sunlit-dawn: #4a4034;
    --sunlit-morning: #6b6252;
    
    --sunlit-light: var(--sunlit-day);
    --sunlit-dark: var(--sunlit-night);
    --sunlit-shadow: #1a1917;
    --sunlit-bounce-light: #f5d7a6;
    --sunlit-timing: cubic-bezier(0.455, 0.190, 0.000, 0.985);
    
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    pointer-events: none;
    z-index: -1;
    overflow: hidden;
    background-color: var(--sunlit-light);
  }
  
  /* Intensity variations */
  .sunlit-subtle {
    opacity: 0.15;
  }
  
  .sunlit-medium {
    opacity: 0.6;
  }
  
  .sunlit-strong {
    opacity: 0.9;
  }
  
  /* Glow effects for light bouncing */
  .sunlit-glow,
  .sunlit-glow-bounce {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    pointer-events: none;
  }
  
  .sunlit-glow {
    background: radial-gradient(
      ellipse 80% 60% at 60% 20%,
      rgba(245, 215, 166, 0.4) 0%,
      rgba(245, 215, 166, 0.1) 50%,
      transparent 70%
    );
    mix-blend-mode: soft-light;
  }
  
  .sunlit-glow-bounce {
    background: linear-gradient(
      135deg,
      rgba(252, 204, 131, 0.2) 0%,
      transparent 30%
    );
    mix-blend-mode: overlay;
  }
  
  /* 3D perspective container */
  .sunlit-perspective {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    perspective: 1000px;
  }
  
  /* Animated leaves background */
  .sunlit-leaves {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      ellipse 40% 30% at 80% 60%,
      rgba(90, 107, 71, 0.03) 0%,
      rgba(168, 181, 160, 0.02) 30%,
      transparent 60%
    );
    opacity: 0.4;
  }
  
  /* Window blinds structure */
  .sunlit-blinds {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .shutters {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  
  .shutter {
    position: absolute;
    left: 0;
    width: 80%;
    height: 4.35%;
    background: linear-gradient(
      90deg,
      rgba(139, 90, 60, 0.08) 0%,
      rgba(139, 90, 60, 0.04) 40%,
      transparent 70%
    );
    transform-origin: left center;
  }
  
  /* Position individual shutters */
  .shutter:nth-child(1) { top: 0%; }
  .shutter:nth-child(2) { top: 4.35%; }
  .shutter:nth-child(3) { top: 8.70%; }
  .shutter:nth-child(4) { top: 13.05%; }
  .shutter:nth-child(5) { top: 17.40%; }
  .shutter:nth-child(6) { top: 21.75%; }
  .shutter:nth-child(7) { top: 26.10%; }
  .shutter:nth-child(8) { top: 30.45%; }
  .shutter:nth-child(9) { top: 34.80%; }
  .shutter:nth-child(10) { top: 39.15%; }
  .shutter:nth-child(11) { top: 43.50%; }
  .shutter:nth-child(12) { top: 47.85%; }
  .shutter:nth-child(13) { top: 52.20%; }
  .shutter:nth-child(14) { top: 56.55%; }
  .shutter:nth-child(15) { top: 60.90%; }
  .shutter:nth-child(16) { top: 65.25%; }
  .shutter:nth-child(17) { top: 69.60%; }
  .shutter:nth-child(18) { top: 73.95%; }
  .shutter:nth-child(19) { top: 78.30%; }
  .shutter:nth-child(20) { top: 82.65%; }
  .shutter:nth-child(21) { top: 87.00%; }
  .shutter:nth-child(22) { top: 91.35%; }
  .shutter:nth-child(23) { top: 95.70%; }
  
  /* Vertical window bars - removed to fix dark line artifacts */
  .vertical-bars {
    display: none;
  }
  
  .bar {
    display: none;
  }
  
  /* Progressive blur layers for depth */
  .blur-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
  }
  
  .blur-1 {
    backdrop-filter: blur(2px);
    mask-image: linear-gradient(135deg, 
      rgba(0,0,0,0.2) 0%, 
      rgba(0,0,0,0.1) 50%, 
      transparent 80%);
  }
  
  .blur-2 {
    backdrop-filter: blur(4px);
    mask-image: linear-gradient(135deg, 
      rgba(0,0,0,0.15) 0%, 
      rgba(0,0,0,0.08) 60%, 
      transparent 90%);
  }
  
  .blur-3 {
    backdrop-filter: blur(8px);
    mask-image: linear-gradient(135deg, 
      rgba(0,0,0,0.1) 0%, 
      rgba(0,0,0,0.05) 70%, 
      transparent 95%);
  }
  
  .blur-4 {
    backdrop-filter: blur(16px);
    mask-image: linear-gradient(135deg, 
      rgba(0,0,0,0.05) 0%, 
      rgba(0,0,0,0.02) 80%, 
      transparent 100%);
  }
  
  /* Content overlay */
  .sunlit-content {
    position: relative;
    z-index: 1;
    width: 100%;
    height: 100%;
    pointer-events: auto;
  }
  
  /* Day/night transition animations */
  @keyframes sunlit-sunrise {
    0% { background-color: var(--sunlit-night); }
    10% { background-color: var(--sunlit-dawn); }
    35% { background-color: var(--sunlit-morning); }
    100% { background-color: var(--sunlit-day); }
  }
  
  @keyframes sunlit-sunset {
    0% { background-color: var(--sunlit-day); }
    30% { background-color: var(--sunlit-evening); }
    60% { background-color: var(--sunlit-dusk); }
    90% { background-color: var(--sunlit-dawn); }
    100% { background-color: var(--sunlit-night); }
  }
  
  /* Animation states */
  .sunlit-effect.sunrise {
    animation: sunlit-sunrise 2s var(--sunlit-timing) forwards;
  }
  
  .sunlit-effect.sunset {
    animation: sunlit-sunset 3s var(--sunlit-timing) forwards;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .sunlit-subtle {
      opacity: 0.2;
    }
    
    .sunlit-medium {
      opacity: 0.4;
    }
    
    .sunlit-strong {
      opacity: 0.6;
    }
    
    .blur-1, .blur-2, .blur-3, .blur-4 {
      backdrop-filter: blur(2px);
    }
  }
  
  /* Reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    .sunlit-leaves {
      filter: none;
    }
    
    .sunlit-effect {
      animation: none;
    }
    
    * {
      animation-duration: 0.01s !important;
      animation-iteration-count: 1 !important;
    }
  }
</style>

<script>
  // Optional interactive controls
  document.addEventListener('DOMContentLoaded', () => {
    const sunlitContainer = document.getElementById('sunlit-container');
    let isDay = true;
    
    // Toggle day/night on spacebar or click (optional)
    document.addEventListener('keydown', (e) => {
      if (e.code === 'Space' && e.target === document.body) {
        e.preventDefault();
        toggleDayNight();
      }
    });
    
    function toggleDayNight() {
      if (!sunlitContainer) return;
      
      sunlitContainer.classList.remove('sunrise', 'sunset');
      
      if (isDay) {
        sunlitContainer.classList.add('sunset');
      } else {
        sunlitContainer.classList.add('sunrise');
      }
      
      isDay = !isDay;
    }
  });
</script>