---
title: "Blog Post Features & Template"
description: "A reference for blog features and Quarto options with working examples."
date: 2025-01-15
lastUpdated: 2025-01-15
categories: [Tutorial, Meta]
tags: ["blogging", "quarto", "template"]
heroImage: ../../../../assets/images/homepage/self.jpg
heroImagePositionX: 0
heroImagePositionY: 0.235
heroImageScale: 3.5
images:
  - ../../../../assets/images/blog/2025/01-15-blog-post-features-template/sample-plot-1.png
draft: false
execute:
  echo: true
  eval: true
  warning: false
  message: false
format:
  md:
    variant: gfm
    preserve-yaml: true
    code-fold: false
    code-block-bg: false
    code-tools: false
    title-block-style: none
bibliography: references.bib
link-citations: true
cache: true
freeze: false
knitr:
  opts_chunk:
    fig.path: "src/assets/images/blog/2025/01-15-blog-post-features-template/"
---

<span class="dropcap dropcap--ornate dropcap--serious" data-first-letter="I" aria-hidden="true">I</span> keep finding myself looking up the same Quarto features every time I write a post, so I figured it would be useful to have a working example of everything in one place. Nothing groundbreaking here—just the basics that I use regularly and some things that took me a while to figure out.

## YAML Front Matter

The essential stuff goes at the top:

```yaml
title: "Your Title"
description: "Brief description for SEO"
date: 2025-01-15
categories: [Statistics, R]
tags: ["brms", "Bayesian", "simulation"]
```

Other useful options:
- `lastUpdated`: When you made changes
- `heroImage`: Path to header image
- `draft: true`: Hide from site
- `cache: true`: Speed up builds for computational posts

## Typography & Math

Drop caps work with this syntax:

```html
<span class="dropcap" data-first-letter="I">I</span> started with...
```

Inline math like $\mu = \sum_{i=1}^n x_i$ and display equations:

$$
\hat{\beta} = (X^TX)^{-1}X^Ty
$$

Citations work like this [@cinelliCrashCourseGood2020] if you have a `references.bib` file.

> margin: This is a margin note that appears in the right margin. Useful for side comments or additional context.

Basic R chunk that shows code and runs it:

```{r}
#| label: basic-example

library(ggplot2)
library(dplyr)

set.seed(42)
data <- data.frame(
  x = rnorm(100),
  y = rnorm(100) + 0.3 * rnorm(100),
  group = sample(c("A", "B", "C"), 100, replace = TRUE)
)

head(data, 3)
```

<details class="code-collapse">
<summary>Making plots with figure options</summary>

```{r}
#| label: sample-plot
#| fig-cap: "Simple scatter plot example"
#| fig-width: 8
#| fig-height: 5

ggplot(data, aes(x = x, y = y, color = group)) +
  geom_point(alpha = 0.7) +
  theme_minimal() +
  labs(title = "Sample Data", x = "X values", y = "Y values")
```

</details>

> margin: Code chunk options go after `#|`. The most useful ones are `echo`, `eval`, `fig-cap`, and `fig-width`.

## Useful Chunk Options

Show code but don't run it:
```{r}
#| eval: false

expensive_function <- function(x) {
  # This displays but doesn't execute
  Sys.sleep(10)
  return(x^2)
}
```

Run code but hide it:
```{r}
#| echo: false

# This runs silently
hidden_result <- "Code runs, output shows, but code is hidden"
print(hidden_result)
```

## Collapsible Code Sections

For longer code that might clutter the main text:

<details class="code-collapse">
<summary>Show data processing code</summary>

```{r}
#| label: processing-example

# Simulate some messier data processing
processed_data <- data %>%
  filter(!is.na(x), !is.na(y)) %>%
  mutate(
    x_scaled = scale(x)[,1],
    y_scaled = scale(y)[,1],
    distance = sqrt(x_scaled^2 + y_scaled^2)
  ) %>%
  arrange(desc(distance))

head(processed_data, 3)
```

</details>

## Common Patterns

**Show clean code, run complex version behind the scenes:**

<details class="code-collapse">
<summary>Show simple model code</summary>

```{r}
#| eval: false

# What readers see
model <- lm(mpg ~ wt + hp, data = mtcars)
summary(model)
```

</details>

```{r}
#| echo: false
#| message: false

# What actually runs with better error handling
library(broom)
model <- lm(mpg ~ wt + hp, data = mtcars)
results <- tidy(model) %>% 
  select(term, estimate, p.value) %>%
  mutate(across(where(is.numeric), ~round(.x, 3)))

knitr::kable(results)
```

**Quick reference for chunk options:**

| Option | Purpose |
|--------|---------|
| `echo: false` | Hide code, show output |
| `eval: false` | Show code, don't run |
| `fig-width: 8` | Control figure size |
| `cache: true` | Save results |

## Other Stuff

Regular markdown works fine—**bold**, *italic*, `code`, [links](https://quarto.org/), lists, etc.

For more detailed options, check the [Quarto docs](https://quarto.org/docs/reference/).

## References

::: {#refs}
:::